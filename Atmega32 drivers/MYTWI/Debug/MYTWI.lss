
MYTWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001680  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000d7f  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9b 03 	call	0x736	; 0x736 <main>
  64:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_priivate.h"
#include "../Include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit(void)
{
    DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION, PORTA_PIN6_DIRECTION, PORTA_PIN5_DIRECTION,
  6c:	8d e7       	ldi	r24, 0x7D	; 125
  6e:	8a bb       	out	0x1a, r24	; 26
                        PORTA_PIN4_DIRECTION, PORTA_PIN3_DIRECTION, PORTA_PIN2_DIRECTION, PORTA_PIN1_DIRECTION, PORTA_PIN0_DIRECTION);

    DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION, PORTB_PIN6_DIRECTION, PORTB_PIN5_DIRECTION,
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	87 bb       	out	0x17, r24	; 23
                        PORTB_PIN4_DIRECTION, PORTB_PIN3_DIRECTION, PORTB_PIN2_DIRECTION, PORTB_PIN1_DIRECTION, PORTB_PIN0_DIRECTION);

    DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION, PORTC_PIN6_DIRECTION, PORTC_PIN5_DIRECTION,
  74:	84 bb       	out	0x14, r24	; 20
                        PORTC_PIN4_DIRECTION, PORTC_PIN3_DIRECTION, PORTC_PIN2_DIRECTION, PORTC_PIN1_DIRECTION, PORTC_PIN0_DIRECTION);

    DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION, PORTD_PIN6_DIRECTION, PORTD_PIN5_DIRECTION,
  76:	81 bb       	out	0x11, r24	; 17
                        PORTD_PIN4_DIRECTION, PORTD_PIN3_DIRECTION, PORTD_PIN2_DIRECTION, PORTD_PIN1_DIRECTION, PORTD_PIN0_DIRECTION);

    PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE,
  78:	1b ba       	out	0x1b, r1	; 27
                         PORTA_PIN4_VALUE, PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);

    PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE,
  7a:	18 ba       	out	0x18, r1	; 24
                         PORTB_PIN4_VALUE, PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);

    PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE,
  7c:	15 ba       	out	0x15, r1	; 21
                         PORTC_PIN4_VALUE, PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);

    PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE,
  7e:	12 ba       	out	0x12, r1	; 18
                         PORTD_PIN4_VALUE, PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);
}
  80:	08 95       	ret

00000082 <MDIO_voidSetPinDirection>:
// PORT ID :- PORTA - PORTB - PORTC - PORTD
// PIN ID  :- PIN0 ... PIN7
// Direction : PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPinDirection(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
    switch (A_u8PortId)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	49 f1       	breq	.+82     	; 0xd8 <MDIO_voidSetPinDirection+0x56>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	38 f0       	brcs	.+14     	; 0x98 <MDIO_voidSetPinDirection+0x16>
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	09 f4       	brne	.+2      	; 0x90 <MDIO_voidSetPinDirection+0xe>
  8e:	44 c0       	rjmp	.+136    	; 0x118 <MDIO_voidSetPinDirection+0x96>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	09 f0       	breq	.+2      	; 0x96 <MDIO_voidSetPinDirection+0x14>
  94:	7e c0       	rjmp	.+252    	; 0x192 <MDIO_voidSetPinDirection+0x110>
  96:	5f c0       	rjmp	.+190    	; 0x156 <MDIO_voidSetPinDirection+0xd4>
    {
    case PORTA:
        switch (A_u8Direction)
  98:	44 23       	and	r20, r20
  9a:	81 f0       	breq	.+32     	; 0xbc <MDIO_voidSetPinDirection+0x3a>
  9c:	41 30       	cpi	r20, 0x01	; 1
  9e:	09 f0       	breq	.+2      	; 0xa2 <MDIO_voidSetPinDirection+0x20>
  a0:	78 c0       	rjmp	.+240    	; 0x192 <MDIO_voidSetPinDirection+0x110>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRA_REG, A_u8PinId);
  a2:	ea e3       	ldi	r30, 0x3A	; 58
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	20 81       	ld	r18, Z
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <MDIO_voidSetPinDirection+0x30>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <MDIO_voidSetPinDirection+0x2c>
  b6:	28 2b       	or	r18, r24
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret
            break;
        case PIN_INPUT:
            CLR_BIT(DDRA_REG, A_u8PinId);
  bc:	ea e3       	ldi	r30, 0x3A	; 58
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	20 81       	ld	r18, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <MDIO_voidSetPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <MDIO_voidSetPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTB:
        switch (A_u8Direction)
  d8:	44 23       	and	r20, r20
  da:	81 f0       	breq	.+32     	; 0xfc <MDIO_voidSetPinDirection+0x7a>
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	09 f0       	breq	.+2      	; 0xe2 <MDIO_voidSetPinDirection+0x60>
  e0:	58 c0       	rjmp	.+176    	; 0x192 <MDIO_voidSetPinDirection+0x110>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRB_REG, A_u8PinId);
  e2:	e7 e3       	ldi	r30, 0x37	; 55
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	20 81       	ld	r18, Z
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <MDIO_voidSetPinDirection+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <MDIO_voidSetPinDirection+0x6c>
  f6:	28 2b       	or	r18, r24
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret
            break;
        case PIN_INPUT:
            CLR_BIT(DDRB_REG, A_u8PinId);
  fc:	e7 e3       	ldi	r30, 0x37	; 55
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	20 81       	ld	r18, Z
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <MDIO_voidSetPinDirection+0x8a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <MDIO_voidSetPinDirection+0x86>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	80 83       	st	Z, r24
 116:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTC:
        switch (A_u8Direction)
 118:	44 23       	and	r20, r20
 11a:	79 f0       	breq	.+30     	; 0x13a <MDIO_voidSetPinDirection+0xb8>
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	c9 f5       	brne	.+114    	; 0x192 <MDIO_voidSetPinDirection+0x110>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRC_REG, A_u8PinId);
 120:	e4 e3       	ldi	r30, 0x34	; 52
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	20 81       	ld	r18, Z
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <MDIO_voidSetPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <MDIO_voidSetPinDirection+0xaa>
 134:	28 2b       	or	r18, r24
 136:	20 83       	st	Z, r18
 138:	08 95       	ret
            break;
        case PIN_INPUT:
            CLR_BIT(DDRC_REG, A_u8PinId);
 13a:	e4 e3       	ldi	r30, 0x34	; 52
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	20 81       	ld	r18, Z
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <MDIO_voidSetPinDirection+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <MDIO_voidSetPinDirection+0xc4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	80 83       	st	Z, r24
 154:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTD:
        switch (A_u8Direction)
 156:	44 23       	and	r20, r20
 158:	79 f0       	breq	.+30     	; 0x178 <MDIO_voidSetPinDirection+0xf6>
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	d1 f4       	brne	.+52     	; 0x192 <MDIO_voidSetPinDirection+0x110>
        {
        case PIN_OUTPUT:
            SET_BIT(DDRD_REG, A_u8PinId);
 15e:	e1 e3       	ldi	r30, 0x31	; 49
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	20 81       	ld	r18, Z
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <MDIO_voidSetPinDirection+0xec>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <MDIO_voidSetPinDirection+0xe8>
 172:	28 2b       	or	r18, r24
 174:	20 83       	st	Z, r18
 176:	08 95       	ret
            break;
        case PIN_INPUT:
            CLR_BIT(DDRD_REG, A_u8PinId);
 178:	e1 e3       	ldi	r30, 0x31	; 49
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	20 81       	ld	r18, Z
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <MDIO_voidSetPinDirection+0x106>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <MDIO_voidSetPinDirection+0x102>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <MDIO_voidSetPinValue>:
// PORT ID :- PORTA - PORTB - PORTC - PORTD
// PIN ID  :- PIN0 ... PIN7
// Value   : PIN_HIGH - PIN_LOW
void MDIO_voidSetPinValue(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
    switch (A_u8PortId)
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	49 f1       	breq	.+82     	; 0x1ea <MDIO_voidSetPinValue+0x56>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	38 f0       	brcs	.+14     	; 0x1aa <MDIO_voidSetPinValue+0x16>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	09 f4       	brne	.+2      	; 0x1a2 <MDIO_voidSetPinValue+0xe>
 1a0:	44 c0       	rjmp	.+136    	; 0x22a <MDIO_voidSetPinValue+0x96>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <MDIO_voidSetPinValue+0x14>
 1a6:	7e c0       	rjmp	.+252    	; 0x2a4 <MDIO_voidSetPinValue+0x110>
 1a8:	5f c0       	rjmp	.+190    	; 0x268 <MDIO_voidSetPinValue+0xd4>
    {
    case PORTA:
        switch (A_u8Value)
 1aa:	44 23       	and	r20, r20
 1ac:	81 f0       	breq	.+32     	; 0x1ce <MDIO_voidSetPinValue+0x3a>
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <MDIO_voidSetPinValue+0x20>
 1b2:	78 c0       	rjmp	.+240    	; 0x2a4 <MDIO_voidSetPinValue+0x110>
        {
        case PIN_HIGH:
            SET_BIT(PORTA_REG, A_u8PinId);
 1b4:	eb e3       	ldi	r30, 0x3B	; 59
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	20 81       	ld	r18, Z
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <MDIO_voidSetPinValue+0x30>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <MDIO_voidSetPinValue+0x2c>
 1c8:	28 2b       	or	r18, r24
 1ca:	20 83       	st	Z, r18
 1cc:	08 95       	ret
            break;
        case PIN_LOW:
            CLR_BIT(PORTA_REG, A_u8PinId);
 1ce:	eb e3       	ldi	r30, 0x3B	; 59
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	20 81       	ld	r18, Z
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <MDIO_voidSetPinValue+0x4a>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <MDIO_voidSetPinValue+0x46>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTB:
        switch (A_u8Value)
 1ea:	44 23       	and	r20, r20
 1ec:	81 f0       	breq	.+32     	; 0x20e <MDIO_voidSetPinValue+0x7a>
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <MDIO_voidSetPinValue+0x60>
 1f2:	58 c0       	rjmp	.+176    	; 0x2a4 <MDIO_voidSetPinValue+0x110>
        {
        case PIN_HIGH:
            SET_BIT(PORTB_REG, A_u8PinId);
 1f4:	e8 e3       	ldi	r30, 0x38	; 56
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <MDIO_voidSetPinValue+0x70>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <MDIO_voidSetPinValue+0x6c>
 208:	28 2b       	or	r18, r24
 20a:	20 83       	st	Z, r18
 20c:	08 95       	ret
            break;
        case PIN_LOW:
            CLR_BIT(PORTB_REG, A_u8PinId);
 20e:	e8 e3       	ldi	r30, 0x38	; 56
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	20 81       	ld	r18, Z
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <MDIO_voidSetPinValue+0x8a>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <MDIO_voidSetPinValue+0x86>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	80 83       	st	Z, r24
 228:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTC:
        switch (A_u8Value)
 22a:	44 23       	and	r20, r20
 22c:	79 f0       	breq	.+30     	; 0x24c <MDIO_voidSetPinValue+0xb8>
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	c9 f5       	brne	.+114    	; 0x2a4 <MDIO_voidSetPinValue+0x110>
        {
        case PIN_HIGH:
            SET_BIT(PORTC_REG, A_u8PinId);
 232:	e5 e3       	ldi	r30, 0x35	; 53
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	20 81       	ld	r18, Z
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <MDIO_voidSetPinValue+0xae>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <MDIO_voidSetPinValue+0xaa>
 246:	28 2b       	or	r18, r24
 248:	20 83       	st	Z, r18
 24a:	08 95       	ret
            break;
        case PIN_LOW:
            CLR_BIT(PORTC_REG, A_u8PinId);
 24c:	e5 e3       	ldi	r30, 0x35	; 53
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	20 81       	ld	r18, Z
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <MDIO_voidSetPinValue+0xc8>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <MDIO_voidSetPinValue+0xc4>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	80 83       	st	Z, r24
 266:	08 95       	ret
        default:
            break;
        }
        break;
    case PORTD:
        switch (A_u8Value)
 268:	44 23       	and	r20, r20
 26a:	79 f0       	breq	.+30     	; 0x28a <MDIO_voidSetPinValue+0xf6>
 26c:	41 30       	cpi	r20, 0x01	; 1
 26e:	d1 f4       	brne	.+52     	; 0x2a4 <MDIO_voidSetPinValue+0x110>
        {
        case PIN_HIGH:
            SET_BIT(PORTD_REG, A_u8PinId);
 270:	e2 e3       	ldi	r30, 0x32	; 50
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	20 81       	ld	r18, Z
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <MDIO_voidSetPinValue+0xec>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <MDIO_voidSetPinValue+0xe8>
 284:	28 2b       	or	r18, r24
 286:	20 83       	st	Z, r18
 288:	08 95       	ret
            break;
        case PIN_LOW:
            CLR_BIT(PORTD_REG, A_u8PinId);
 28a:	e2 e3       	ldi	r30, 0x32	; 50
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	20 81       	ld	r18, Z
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <MDIO_voidSetPinValue+0x106>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <MDIO_voidSetPinValue+0x102>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <MDIO_u8GetPinValue>:
}

u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
    u8 local_u8PinValue = 0;
    switch (A_u8PortId)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	89 f0       	breq	.+34     	; 0x2cc <MDIO_u8GetPinValue+0x26>
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	30 f0       	brcs	.+12     	; 0x2ba <MDIO_u8GetPinValue+0x14>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	b1 f0       	breq	.+44     	; 0x2de <MDIO_u8GetPinValue+0x38>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	e9 f0       	breq	.+58     	; 0x2f0 <MDIO_u8GetPinValue+0x4a>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
    {
    case PORTA:
        local_u8PinValue = GET_BIT(PINA_REG, A_u8PinId);
 2ba:	89 b3       	in	r24, 0x19	; 25
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <MDIO_u8GetPinValue+0x1e>
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <MDIO_u8GetPinValue+0x1a>
 2c8:	81 70       	andi	r24, 0x01	; 1
 2ca:	08 95       	ret
        break;
    case PORTB:
        local_u8PinValue = GET_BIT(PINB_REG, A_u8PinId);
 2cc:	86 b3       	in	r24, 0x16	; 22
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <MDIO_u8GetPinValue+0x30>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <MDIO_u8GetPinValue+0x2c>
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	08 95       	ret
        break;
    case PORTC:
        local_u8PinValue = GET_BIT(PINC_REG, A_u8PinId);
 2de:	83 b3       	in	r24, 0x13	; 19
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <MDIO_u8GetPinValue+0x42>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <MDIO_u8GetPinValue+0x3e>
 2ec:	81 70       	andi	r24, 0x01	; 1
 2ee:	08 95       	ret
        break;
    case PORTD:
        local_u8PinValue = GET_BIT(PIND_REG, A_u8PinId);
 2f0:	80 b3       	in	r24, 0x10	; 16
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <MDIO_u8GetPinValue+0x54>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <MDIO_u8GetPinValue+0x50>
 2fe:	81 70       	andi	r24, 0x01	; 1
        break;
    default:
        break;
    }
    return local_u8PinValue;
}
 300:	08 95       	ret

00000302 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortId, u8 A_u8Value)
{
    switch (A_u8PortId)
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	49 f0       	breq	.+18     	; 0x318 <MDIO_voidSetPortValue+0x16>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	28 f0       	brcs	.+10     	; 0x314 <MDIO_voidSetPortValue+0x12>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	39 f0       	breq	.+14     	; 0x31c <MDIO_voidSetPortValue+0x1a>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	41 f4       	brne	.+16     	; 0x322 <MDIO_voidSetPortValue+0x20>
 312:	06 c0       	rjmp	.+12     	; 0x320 <MDIO_voidSetPortValue+0x1e>
    {
    case PORTA:
        PORTA_REG = A_u8Value;
 314:	6b bb       	out	0x1b, r22	; 27
 316:	08 95       	ret
        break;
    case PORTB:
        PORTB_REG = A_u8Value;
 318:	68 bb       	out	0x18, r22	; 24
 31a:	08 95       	ret
        break;
    case PORTC:
        PORTC_REG = A_u8Value;
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
        break;
    case PORTD:
        PORTD_REG = A_u8Value;
 320:	62 bb       	out	0x12, r22	; 18
 322:	08 95       	ret

00000324 <MDIO_voidSetPortDirection>:
    }
}

void MDIO_voidSetPortDirection(u8 A_u8PortId, u8 A_u8Direction)
{
    switch (A_u8PortId)
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	49 f0       	breq	.+18     	; 0x33a <MDIO_voidSetPortDirection+0x16>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	28 f0       	brcs	.+10     	; 0x336 <MDIO_voidSetPortDirection+0x12>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	39 f0       	breq	.+14     	; 0x33e <MDIO_voidSetPortDirection+0x1a>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	41 f4       	brne	.+16     	; 0x344 <MDIO_voidSetPortDirection+0x20>
 334:	06 c0       	rjmp	.+12     	; 0x342 <MDIO_voidSetPortDirection+0x1e>
    {
    case PORTA:
        DDRA_REG = A_u8Direction;
 336:	6a bb       	out	0x1a, r22	; 26
 338:	08 95       	ret
        break;
    case PORTB:
        DDRB_REG = A_u8Direction;
 33a:	67 bb       	out	0x17, r22	; 23
 33c:	08 95       	ret
        break;
    case PORTC:
        DDRC_REG = A_u8Direction;
 33e:	64 bb       	out	0x14, r22	; 20
 340:	08 95       	ret
        break;
    case PORTD:
        DDRD_REG = A_u8Direction;
 342:	61 bb       	out	0x11, r22	; 17
 344:	08 95       	ret

00000346 <private_u8CheckError>:
#define EEPROM_HW_A2_ADDRESS 0

static u8 private_u8CheckError(TWI_ErrorStatus A_enuErorrStatus)
{
	u8 local_u8ErrorStatus=TWI_OK;
	if (A_enuErorrStatus != TWI_OK)
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	11 f0       	breq	.+4      	; 0x34e <private_u8CheckError+0x8>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	08 95       	ret
 34e:	81 e0       	ldi	r24, 0x01	; 1
	{
		local_u8ErrorStatus = TWI_NOK;
	}
	return local_u8ErrorStatus;
}
 350:	08 95       	ret

00000352 <EEPROM_u8ReadByte>:
	return local_ErrorStatus;
}


u8 EEPROM_u8ReadByte (u16 A_u16ByteAddress, u8 *A_pu8ReturnedData)
{
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	08 2f       	mov	r16, r24
 35c:	19 2f       	mov	r17, r25
 35e:	7b 01       	movw	r14, r22
	u8 local_ErrorStatus = TWI_OK;
	TWI_ErrorStatus local_enuErorrStatus= TWI_OK;

	// Send Start Condition
	local_enuErorrStatus=TWI_u8SendStartCondition();
 360:	0e 94 12 03 	call	0x624	; 0x624 <TWI_u8SendStartCondition>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Slave Address with write operation
	local_enuErorrStatus=TWI_u8SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | (EEPROM_HW_A2_ADDRESS<<2)|(A_u16ByteAddress>>8));
 364:	10 65       	ori	r17, 0x50	; 80
 366:	81 2f       	mov	r24, r17
 368:	0e 94 4e 03 	call	0x69c	; 0x69c <TWI_u8SendSlaveAddressWithWrite>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Byte Address
	local_enuErorrStatus=TWI_u8SendDataByte((u8)A_u16ByteAddress);
 36c:	80 2f       	mov	r24, r16
 36e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TWI_u8SendDataByte>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Repeated Start Condition
	local_enuErorrStatus=TWI_u8SendReStartCondition();
 372:	0e 94 2b 03 	call	0x656	; 0x656 <TWI_u8SendReStartCondition>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Slave Address with Read operation
	local_enuErorrStatus=TWI_u8SendSlaveAddressWithRead(EEPROM_FIXED_ADDRESS | (EEPROM_HW_A2_ADDRESS<<2)|(A_u16ByteAddress>>8));
 376:	81 2f       	mov	r24, r17
 378:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TWI_u8SendSlaveAddressWithRead>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Read Data Byte
	local_enuErorrStatus=TWI_u8ReadDataByte(A_pu8ReturnedData);
 37c:	c7 01       	movw	r24, r14
 37e:	0e 94 84 03 	call	0x708	; 0x708 <TWI_u8ReadDataByte>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);
 382:	0e 94 a3 01 	call	0x346	; 0x346 <private_u8CheckError>
 386:	18 2f       	mov	r17, r24

	// Stop Condition
	TWI_u8SendStopCondition();
 388:	0e 94 44 03 	call	0x688	; 0x688 <TWI_u8SendStopCondition>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 38c:	80 e1       	ldi	r24, 0x10	; 16
 38e:	97 e2       	ldi	r25, 0x27	; 39
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <EEPROM_u8ReadByte+0x3e>
	// Delay
	_delay_ms (5);

	// Return Status
	return local_ErrorStatus;
}
 394:	81 2f       	mov	r24, r17
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	08 95       	ret

000003a0 <EEPROM_u8WriteByte>:
	return local_u8ErrorStatus;
}


u8 EEPROM_u8WriteByte (u16 A_u16ByteAddress, u8 A_u8ByteData)
{
 3a0:	ff 92       	push	r15
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	08 2f       	mov	r16, r24
 3a8:	19 2f       	mov	r17, r25
 3aa:	f6 2e       	mov	r15, r22
	u8 local_ErrorStatus = TWI_OK;
	TWI_ErrorStatus local_enuErorrStatus= TWI_OK;

	// Send Start Condition
	local_enuErorrStatus=TWI_u8SendStartCondition();
 3ac:	0e 94 12 03 	call	0x624	; 0x624 <TWI_u8SendStartCondition>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Slave Address with write operation
	local_enuErorrStatus=TWI_u8SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | (EEPROM_HW_A2_ADDRESS<<2)|(A_u16ByteAddress>>8));
 3b0:	81 2f       	mov	r24, r17
 3b2:	80 65       	ori	r24, 0x50	; 80
 3b4:	0e 94 4e 03 	call	0x69c	; 0x69c <TWI_u8SendSlaveAddressWithWrite>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Byte Address
	local_enuErorrStatus=TWI_u8SendDataByte((u8)A_u16ByteAddress);
 3b8:	80 2f       	mov	r24, r16
 3ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TWI_u8SendDataByte>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);

	// Send Byte Data
	local_enuErorrStatus=TWI_u8SendDataByte(A_u8ByteData);
 3be:	8f 2d       	mov	r24, r15
 3c0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TWI_u8SendDataByte>
	local_ErrorStatus = private_u8CheckError(local_enuErorrStatus);
 3c4:	0e 94 a3 01 	call	0x346	; 0x346 <private_u8CheckError>
 3c8:	18 2f       	mov	r17, r24

	// Stop Condition
	TWI_u8SendStopCondition();
 3ca:	0e 94 44 03 	call	0x688	; 0x688 <TWI_u8SendStopCondition>
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	97 e2       	ldi	r25, 0x27	; 39
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <EEPROM_u8WriteByte+0x32>
	// Delay
	_delay_ms (5);

	// Return Status
	return local_ErrorStatus;
}
 3d6:	81 2f       	mov	r24, r17
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	08 95       	ret

000003e0 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 3e0:	ef e5       	ldi	r30, 0x5F	; 95
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 68       	ori	r24, 0x80	; 128
 3e8:	80 83       	st	Z, r24
}
 3ea:	08 95       	ret

000003ec <MGI_voidDisable>:
void MGI_voidDisable (void)
{
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 3ec:	ef e5       	ldi	r30, 0x5F	; 95
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	8f 77       	andi	r24, 0x7F	; 127
 3f4:	80 83       	st	Z, r24
}
 3f6:	08 95       	ret

000003f8 <HLCD_voidSendData>:
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
}

void HLCD_voidSendData(u8 A_u8Data)
{
 3f8:	1f 93       	push	r17
 3fa:	18 2f       	mov	r17, r24
    //    RS --> 1 , RW --> 0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, PIN_HIGH);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, RW_PIN, PIN_LOW);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
    // Send command to LCD
    MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	61 2f       	mov	r22, r17
 414:	0e 94 81 01 	call	0x302	; 0x302 <MDIO_voidSetPortValue>
    // Set pulse on Enable Pin with 2 ms delay
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_HIGH);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
 422:	80 ea       	ldi	r24, 0xA0	; 160
 424:	9f e0       	ldi	r25, 0x0F	; 15
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <HLCD_voidSendData+0x2e>
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
}
 434:	1f 91       	pop	r17
 436:	08 95       	ret

00000438 <HLCD_voidDisplayNumber>:
    }
    _delay_ms(1);
}

HLCD_voidDisplayNumber(u32 A_u32Number)
{
 438:	af 92       	push	r10
 43a:	bf 92       	push	r11
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	5b 01       	movw	r10, r22
 44a:	6c 01       	movw	r12, r24
    u32 local_u32Number = 1;
    if (A_u32Number == 0)
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	81 05       	cpc	r24, r1
 452:	91 05       	cpc	r25, r1
 454:	59 f4       	brne	.+22     	; 0x46c <HLCD_voidDisplayNumber+0x34>
    {
        HLCD_voidSendData('0');
 456:	80 e3       	ldi	r24, 0x30	; 48
 458:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HLCD_voidSendData>
 45c:	51 c0       	rjmp	.+162    	; 0x500 <HLCD_voidDisplayNumber+0xc8>
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	e8 16       	cp	r14, r24
 462:	f1 04       	cpc	r15, r1
 464:	01 05       	cpc	r16, r1
 466:	11 05       	cpc	r17, r1
 468:	59 f5       	brne	.+86     	; 0x4c0 <HLCD_voidDisplayNumber+0x88>
 46a:	4a c0       	rjmp	.+148    	; 0x500 <HLCD_voidDisplayNumber+0xc8>
 46c:	ee 24       	eor	r14, r14
 46e:	ff 24       	eor	r15, r15
 470:	87 01       	movw	r16, r14
 472:	e3 94       	inc	r14
    {
        HLCD_voidSendData('0');
    }
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
 474:	c8 01       	movw	r24, r16
 476:	b7 01       	movw	r22, r14
 478:	2a e0       	ldi	r18, 0x0A	; 10
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsi3>
 484:	7b 01       	movw	r14, r22
 486:	8c 01       	movw	r16, r24
 488:	c6 01       	movw	r24, r12
 48a:	b5 01       	movw	r22, r10
 48c:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 490:	e6 0e       	add	r14, r22
 492:	f7 1e       	adc	r15, r23
 494:	08 1f       	adc	r16, r24
 496:	19 1f       	adc	r17, r25
        A_u32Number = A_u32Number / 10;
 498:	c6 01       	movw	r24, r12
 49a:	b5 01       	movw	r22, r10
 49c:	2a e0       	ldi	r18, 0x0A	; 10
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 4a8:	82 2f       	mov	r24, r18
 4aa:	93 2f       	mov	r25, r19
 4ac:	a4 2f       	mov	r26, r20
 4ae:	b5 2f       	mov	r27, r21
 4b0:	5c 01       	movw	r10, r24
 4b2:	6d 01       	movw	r12, r26
    u32 local_u32Number = 1;
    if (A_u32Number == 0)
    {
        HLCD_voidSendData('0');
    }
    while (A_u32Number != 0)
 4b4:	a1 14       	cp	r10, r1
 4b6:	b1 04       	cpc	r11, r1
 4b8:	c1 04       	cpc	r12, r1
 4ba:	d1 04       	cpc	r13, r1
 4bc:	d9 f6       	brne	.-74     	; 0x474 <HLCD_voidDisplayNumber+0x3c>
 4be:	cf cf       	rjmp	.-98     	; 0x45e <HLCD_voidDisplayNumber+0x26>
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
    {
        HLCD_voidSendData((local_u32Number % 10) + 48);
 4c0:	c8 01       	movw	r24, r16
 4c2:	b7 01       	movw	r22, r14
 4c4:	2a e0       	ldi	r18, 0x0A	; 10
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 4d0:	86 2f       	mov	r24, r22
 4d2:	80 5d       	subi	r24, 0xD0	; 208
 4d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HLCD_voidSendData>
        local_u32Number = local_u32Number / 10;
 4d8:	c8 01       	movw	r24, r16
 4da:	b7 01       	movw	r22, r14
 4dc:	2a e0       	ldi	r18, 0x0A	; 10
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__udivmodsi4>
 4e8:	82 2f       	mov	r24, r18
 4ea:	93 2f       	mov	r25, r19
 4ec:	a4 2f       	mov	r26, r20
 4ee:	b5 2f       	mov	r27, r21
 4f0:	7c 01       	movw	r14, r24
 4f2:	8d 01       	movw	r16, r26
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	e8 16       	cp	r14, r24
 4f8:	f1 04       	cpc	r15, r1
 4fa:	01 05       	cpc	r16, r1
 4fc:	11 05       	cpc	r17, r1
 4fe:	01 f7       	brne	.-64     	; 0x4c0 <HLCD_voidDisplayNumber+0x88>
    {
        HLCD_voidSendData((local_u32Number % 10) + 48);
        local_u32Number = local_u32Number / 10;
    }
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	cf 90       	pop	r12
 50c:	bf 90       	pop	r11
 50e:	af 90       	pop	r10
 510:	08 95       	ret

00000512 <HLCD_voidSendString>:
    // Wait for more than 1.53 ms
    _delay_ms(2);
}

void HLCD_voidSendString(u8 *A_Pu8String)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
    while (*A_Pu8String > 0)
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	31 f0       	breq	.+12     	; 0x52a <HLCD_voidSendString+0x18>
    {
        HLCD_voidSendData(*A_Pu8String++);
 51e:	21 96       	adiw	r28, 0x01	; 1
 520:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <HLCD_voidSendData>
    _delay_ms(2);
}

void HLCD_voidSendString(u8 *A_Pu8String)
{
    while (*A_Pu8String > 0)
 524:	88 81       	ld	r24, Y
 526:	88 23       	and	r24, r24
 528:	d1 f7       	brne	.-12     	; 0x51e <HLCD_voidSendString+0xc>
    {
        HLCD_voidSendData(*A_Pu8String++);
    }
}
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <HLCD_voidSendCommand>:

#include <util/delay.h>
#define F_CPU 8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
{
 530:	1f 93       	push	r17
 532:	18 2f       	mov	r17, r24
    //    RS --> 0 , RW --> 0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, RS_PIN, PIN_LOW);
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, RW_PIN, PIN_LOW);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
    // Send command to LCD
    MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	61 2f       	mov	r22, r17
 54c:	0e 94 81 01 	call	0x302	; 0x302 <MDIO_voidSetPortValue>
    // Set pulse on Enable Pin with 2 ms delay
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_HIGH);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
 55a:	80 ea       	ldi	r24, 0xA0	; 160
 55c:	9f e0       	ldi	r25, 0x0F	; 15
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <HLCD_voidSendCommand+0x2e>
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	0e 94 ca 00 	call	0x194	; 0x194 <MDIO_voidSetPinValue>
}
 56c:	1f 91       	pop	r17
 56e:	08 95       	ret

00000570 <HLCD_voidGoToPos>:
    }
}

void HLCD_voidGoToPos(u8 A_u8RowNum, u8 A_u8ColNum)
{
    switch (A_u8RowNum)
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	19 f0       	breq	.+6      	; 0x57a <HLCD_voidGoToPos+0xa>
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	51 f4       	brne	.+20     	; 0x58c <HLCD_voidGoToPos+0x1c>
 578:	05 c0       	rjmp	.+10     	; 0x584 <HLCD_voidGoToPos+0x14>
    {
    case LCD_ROW_ONE:
        HLCD_voidSendCommand(LCD_ROW1_ADDRESS + A_u8ColNum);
 57a:	86 2f       	mov	r24, r22
 57c:	81 58       	subi	r24, 0x81	; 129
 57e:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 582:	04 c0       	rjmp	.+8      	; 0x58c <HLCD_voidGoToPos+0x1c>
        break;
    case LCD_ROW_TWO:
        HLCD_voidSendCommand(LCD_ROW2_ADDRESS + A_u8ColNum);
 584:	86 2f       	mov	r24, r22
 586:	81 54       	subi	r24, 0x41	; 65
 588:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 58c:	80 ed       	ldi	r24, 0xD0	; 208
 58e:	97 e0       	ldi	r25, 0x07	; 7
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <HLCD_voidGoToPos+0x20>
        break;
    default:
        break;
    }
    _delay_ms(1);
}
 594:	08 95       	ret

00000596 <HLCD_voidClearDisplay>:
    // End of Initialization
}

void HLCD_voidClearDisplay(void)
{
    HLCD_voidSendCommand(DISPLAY_CLEAR);
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 59c:	80 ea       	ldi	r24, 0xA0	; 160
 59e:	9f e0       	ldi	r25, 0x0F	; 15
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <HLCD_voidClearDisplay+0xa>
    // Wait for more than 1.53 ms
    _delay_ms(2);
}
 5a4:	08 95       	ret

000005a6 <HLCD_voidInit>:
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT, E_PIN, PIN_LOW);
}

void HLCD_voidInit(void)
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	80 e6       	ldi	r24, 0x60	; 96
 5ac:	9a ee       	ldi	r25, 0xEA	; 234
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <HLCD_voidInit+0x8>
    // Wait for more than 30ms after VDD rises to 4.5V.
    _delay_ms(30);
    // Function Set
    HLCD_voidSendCommand(FUNCTION_SET);
 5b2:	88 e3       	ldi	r24, 0x38	; 56
 5b4:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 5b8:	00 ed       	ldi	r16, 0xD0	; 208
 5ba:	17 e0       	ldi	r17, 0x07	; 7
 5bc:	c8 01       	movw	r24, r16
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	f1 f7       	brne	.-4      	; 0x5be <HLCD_voidInit+0x18>
    // Wait for more than 39 us
    _delay_ms(1);
    // Display ON/OFF Control
    HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
 5c2:	8f e0       	ldi	r24, 0x0F	; 15
 5c4:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 5c8:	c8 01       	movw	r24, r16
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <HLCD_voidInit+0x24>
    // Wait for more than 39 us
    _delay_ms(1);
    // Display Clear
    HLCD_voidSendCommand(DISPLAY_CLEAR);
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
 5d4:	80 ea       	ldi	r24, 0xA0	; 160
 5d6:	9f e0       	ldi	r25, 0x0F	; 15
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <HLCD_voidInit+0x32>
    // Wait for more than 1.53 ms
    _delay_ms(2);
    // Entry Mode Set
    HLCD_voidSendCommand(ENTRY_MODE_SET);
 5dc:	86 e0       	ldi	r24, 0x06	; 6
 5de:	0e 94 98 02 	call	0x530	; 0x530 <HLCD_voidSendCommand>
    // End of Initialization
}
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <TWI_voidMasterInit>:


void TWI_voidMasterInit(void)
{
	// Set Prescalers Value
	CLR_BIT(TWSR,0);
 5e8:	e1 e2       	ldi	r30, 0x21	; 33
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	8e 7f       	andi	r24, 0xFE	; 254
 5f0:	80 83       	st	Z, r24
	CLR_BIT(TWSR,1);
 5f2:	80 81       	ld	r24, Z
 5f4:	8d 7f       	andi	r24, 0xFD	; 253
 5f6:	80 83       	st	Z, r24
	// Set TWBR with the value => 200KHz
	TWBR=12;
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
 5fa:	80 b9       	out	0x00, r24	; 0
	// Enable ACK
	SET_BIT(TWCR,6);
 5fc:	e6 e5       	ldi	r30, 0x56	; 86
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	80 64       	ori	r24, 0x40	; 64
 604:	80 83       	st	Z, r24
	// Enable I2C
	SET_BIT(TWCR,2);
 606:	80 81       	ld	r24, Z
 608:	84 60       	ori	r24, 0x04	; 4
 60a:	80 83       	st	Z, r24
}
 60c:	08 95       	ret

0000060e <TWI_voidSlaveInit>:


void TWI_voidSlaveInit(u8 A_u8Address)
{
	// Set Slave Address in TWAR
	TWAR=A_u8Address<<1;
 60e:	88 0f       	add	r24, r24
 610:	82 b9       	out	0x02, r24	; 2
	// Enable ACK
	SET_BIT(TWCR,6);
 612:	e6 e5       	ldi	r30, 0x56	; 86
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	80 64       	ori	r24, 0x40	; 64
 61a:	80 83       	st	Z, r24
	// Enable I2C
	SET_BIT(TWCR,2);
 61c:	80 81       	ld	r24, Z
 61e:	84 60       	ori	r24, 0x04	; 4
 620:	80 83       	st	Z, r24
}
 622:	08 95       	ret

00000624 <TWI_u8SendStartCondition>:

TWI_ErrorStatus TWI_u8SendStartCondition (void)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Clear INT Flag + Start Condition */
	SET_BIT(TWCR,7);
 624:	e6 e5       	ldi	r30, 0x56	; 86
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 68       	ori	r24, 0x80	; 128
 62c:	80 83       	st	Z, r24
	SET_BIT(TWCR,5);
 62e:	80 81       	ld	r24, Z
 630:	80 62       	ori	r24, 0x20	; 32
 632:	80 83       	st	Z, r24
	/* Wait for the flag to be 1 (polling on flag)*/
	while (GET_BIT(TWCR,7)==0);
 634:	80 81       	ld	r24, Z
 636:	88 23       	and	r24, r24
 638:	ec f7       	brge	.-6      	; 0x634 <TWI_u8SendStartCondition+0x10>
	/* Check TWI Status Register */
	if ((TWSR & 0xF8)!=0x08)
 63a:	81 b1       	in	r24, 0x01	; 1
 63c:	88 7f       	andi	r24, 0xF8	; 248
 63e:	88 30       	cpi	r24, 0x08	; 8
 640:	11 f0       	breq	.+4      	; 0x646 <TWI_u8SendStartCondition+0x22>
 642:	93 e0       	ldi	r25, 0x03	; 3
 644:	01 c0       	rjmp	.+2      	; 0x648 <TWI_u8SendStartCondition+0x24>
 646:	91 e0       	ldi	r25, 0x01	; 1
	{
		local_enuErrorStatus = TWI_SC_ERROR;
	}
	/* Clear Start Condition Bit */
	CLR_BIT(TWCR,5);
 648:	e6 e5       	ldi	r30, 0x56	; 86
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	8f 7d       	andi	r24, 0xDF	; 223
 650:	80 83       	st	Z, r24
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 652:	89 2f       	mov	r24, r25
 654:	08 95       	ret

00000656 <TWI_u8SendReStartCondition>:

TWI_ErrorStatus TWI_u8SendReStartCondition (void)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Clear INT Flag + Start Condition */
	SET_BIT(TWCR,7);
 656:	e6 e5       	ldi	r30, 0x56	; 86
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	80 68       	ori	r24, 0x80	; 128
 65e:	80 83       	st	Z, r24
	SET_BIT(TWCR,5);
 660:	80 81       	ld	r24, Z
 662:	80 62       	ori	r24, 0x20	; 32
 664:	80 83       	st	Z, r24
	/* Wait for the flag to be 1 (polling in flag)*/
	while (GET_BIT(TWCR,7)==0);
 666:	80 81       	ld	r24, Z
 668:	88 23       	and	r24, r24
 66a:	ec f7       	brge	.-6      	; 0x666 <TWI_u8SendReStartCondition+0x10>
	/* Check TWI Status Register */
	if ((TWSR & 0xF8)!=0x10)
 66c:	81 b1       	in	r24, 0x01	; 1
 66e:	88 7f       	andi	r24, 0xF8	; 248
 670:	80 31       	cpi	r24, 0x10	; 16
 672:	11 f0       	breq	.+4      	; 0x678 <TWI_u8SendReStartCondition+0x22>
 674:	94 e0       	ldi	r25, 0x04	; 4
 676:	01 c0       	rjmp	.+2      	; 0x67a <TWI_u8SendReStartCondition+0x24>
 678:	91 e0       	ldi	r25, 0x01	; 1
	{
		local_enuErrorStatus = TWI_RSC_ERROR;
	}
	/* Clear Start Condition Bit */
	CLR_BIT(TWCR,5);
 67a:	e6 e5       	ldi	r30, 0x56	; 86
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	8f 7d       	andi	r24, 0xDF	; 223
 682:	80 83       	st	Z, r24
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 684:	89 2f       	mov	r24, r25
 686:	08 95       	ret

00000688 <TWI_u8SendStopCondition>:

TWI_ErrorStatus TWI_u8SendStopCondition (void)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Clear INT Flag + Stop Condition */
	SET_BIT(TWCR,7);
 688:	e6 e5       	ldi	r30, 0x56	; 86
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	80 68       	ori	r24, 0x80	; 128
 690:	80 83       	st	Z, r24
	SET_BIT(TWCR,4);
 692:	80 81       	ld	r24, Z
 694:	80 61       	ori	r24, 0x10	; 16
 696:	80 83       	st	Z, r24
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret

0000069c <TWI_u8SendSlaveAddressWithWrite>:

TWI_ErrorStatus TWI_u8SendSlaveAddressWithWrite(u8 A_u8SlaveAddress)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Set Slave Address */
	u8 local_u8Byte = A_u8SlaveAddress << 1;
 69c:	88 0f       	add	r24, r24
	/* Set Operation to Write */
	CLR_BIT(local_u8Byte,0);
	/* Set Slave Address to be Sent with the write request */
	TWDR = local_u8Byte;
 69e:	83 b9       	out	0x03, r24	; 3
	/* Clear INT Flag */
	SET_BIT(TWCR,7);
 6a0:	e6 e5       	ldi	r30, 0x56	; 86
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	80 83       	st	Z, r24
	/* Wait for the flag to be 1 (polling on flag)*/
	while (GET_BIT(TWCR,7)==0);
 6aa:	80 81       	ld	r24, Z
 6ac:	88 23       	and	r24, r24
 6ae:	ec f7       	brge	.-6      	; 0x6aa <TWI_u8SendSlaveAddressWithWrite+0xe>
	/* Check TWI Status Register */
	if ((TWSR & 0xF8)!=0x18)
 6b0:	81 b1       	in	r24, 0x01	; 1
 6b2:	88 7f       	andi	r24, 0xF8	; 248
 6b4:	88 31       	cpi	r24, 0x18	; 24
 6b6:	11 f0       	breq	.+4      	; 0x6bc <TWI_u8SendSlaveAddressWithWrite+0x20>
 6b8:	85 e0       	ldi	r24, 0x05	; 5
 6ba:	08 95       	ret
 6bc:	81 e0       	ldi	r24, 0x01	; 1
	{
		local_enuErrorStatus = TWI_SLA_W_ERROR;
	}
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 6be:	08 95       	ret

000006c0 <TWI_u8SendSlaveAddressWithRead>:

TWI_ErrorStatus TWI_u8SendSlaveAddressWithRead(u8 A_u8SlaveAddress)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Set Slave Address */
	u8 local_u8Byte = A_u8SlaveAddress << 1;
 6c0:	88 0f       	add	r24, r24
	/* Set Operation to Read */
	SET_BIT(local_u8Byte,0);
 6c2:	81 60       	ori	r24, 0x01	; 1
	/* Set Slave Address to be Sent with the Read request */
	TWDR = local_u8Byte;
 6c4:	83 b9       	out	0x03, r24	; 3
	/* Clear INT Flag */
	SET_BIT(TWCR,7);
 6c6:	e6 e5       	ldi	r30, 0x56	; 86
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	80 68       	ori	r24, 0x80	; 128
 6ce:	80 83       	st	Z, r24
	/* Wait for the flag to be 1 (polling in flag)*/
	while (GET_BIT(TWCR,7)==0);
 6d0:	80 81       	ld	r24, Z
 6d2:	88 23       	and	r24, r24
 6d4:	ec f7       	brge	.-6      	; 0x6d0 <TWI_u8SendSlaveAddressWithRead+0x10>
	/* Check TWI Status Register */
	if ((TWSR & 0xF8)!=0x40)
 6d6:	81 b1       	in	r24, 0x01	; 1
 6d8:	88 7f       	andi	r24, 0xF8	; 248
 6da:	80 34       	cpi	r24, 0x40	; 64
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <TWI_u8SendSlaveAddressWithRead+0x22>
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	08 95       	ret
 6e2:	81 e0       	ldi	r24, 0x01	; 1
	{
		local_enuErrorStatus = TWI_SLA_R_ERROR;
	}
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 6e4:	08 95       	ret

000006e6 <TWI_u8SendDataByte>:

TWI_ErrorStatus TWI_u8SendDataByte(u8 A_u8Data)
{
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	/* Set Byte Data */
	TWDR = A_u8Data;
 6e6:	83 b9       	out	0x03, r24	; 3
	/* Clear INT Flag */
	SET_BIT(TWCR,7);
 6e8:	e6 e5       	ldi	r30, 0x56	; 86
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	80 68       	ori	r24, 0x80	; 128
 6f0:	80 83       	st	Z, r24
	/* Wait for the flag to be 1 (polling in flag)*/
	while (GET_BIT(TWCR,7)==0);
 6f2:	80 81       	ld	r24, Z
 6f4:	88 23       	and	r24, r24
 6f6:	ec f7       	brge	.-6      	; 0x6f2 <TWI_u8SendDataByte+0xc>
	/* Check TWI Status Register */
	if ((TWSR & 0xF8)!=0x28)
 6f8:	81 b1       	in	r24, 0x01	; 1
 6fa:	88 7f       	andi	r24, 0xF8	; 248
 6fc:	88 32       	cpi	r24, 0x28	; 40
 6fe:	11 f0       	breq	.+4      	; 0x704 <TWI_u8SendDataByte+0x1e>
 700:	87 e0       	ldi	r24, 0x07	; 7
 702:	08 95       	ret
 704:	81 e0       	ldi	r24, 0x01	; 1
	{
		local_enuErrorStatus = TWI_MT_DATA_ERROR;
	}
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 706:	08 95       	ret

00000708 <TWI_u8ReadDataByte>:


TWI_ErrorStatus TWI_u8ReadDataByte(u8 *A_ReturnDataByte)
{
 708:	dc 01       	movw	r26, r24
	TWI_ErrorStatus local_enuErrorStatus = TWI_OK;
	if (A_ReturnDataByte != NULL)
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	11 f4       	brne	.+4      	; 0x712 <TWI_u8ReadDataByte+0xa>
 70e:	89 e0       	ldi	r24, 0x09	; 9
 710:	08 95       	ret
	{
		/* Clear INT Flag */
		SET_BIT(TWCR,7);
 712:	e6 e5       	ldi	r30, 0x56	; 86
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	80 68       	ori	r24, 0x80	; 128
 71a:	80 83       	st	Z, r24
		/* Wait for the flag to be 1 (polling in flag)*/
		while (GET_BIT(TWCR,7)==0);
 71c:	80 81       	ld	r24, Z
 71e:	88 23       	and	r24, r24
 720:	ec f7       	brge	.-6      	; 0x71c <TWI_u8ReadDataByte+0x14>
		/* Check TWI Status Register */
		if ((TWSR & 0xF8)!=0x50)
 722:	81 b1       	in	r24, 0x01	; 1
 724:	88 7f       	andi	r24, 0xF8	; 248
 726:	80 35       	cpi	r24, 0x50	; 80
 728:	11 f0       	breq	.+4      	; 0x72e <TWI_u8ReadDataByte+0x26>
 72a:	88 e0       	ldi	r24, 0x08	; 8
 72c:	08 95       	ret
		{
			local_enuErrorStatus = TWI_MR_DATA_ERROR;
		}
		else
		{
			*A_ReturnDataByte = TWDR;
 72e:	83 b1       	in	r24, 0x03	; 3
 730:	8c 93       	st	X, r24
 732:	81 e0       	ldi	r24, 0x01	; 1
	{
		local_enuErrorStatus = TWI_NULL_POINTER;
	}
	/* Return Status of TWI */
	return local_enuErrorStatus;
}
 734:	08 95       	ret

00000736 <main>:
{
	// local variable to return data in
	u8 local_u8Data=0;

	// Initialize DIO --> PORTD LCD Data, PORTB LCD Control, PORTC TWI
	MDIO_voidInit();
 736:	0e 94 36 00 	call	0x6c	; 0x6c <MDIO_voidInit>

	// Initialize LCD
	HLCD_voidInit();
 73a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <HLCD_voidInit>

	// Initialize TWI in Master Mode
	TWI_voidMasterInit();
 73e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <TWI_voidMasterInit>
	// Read Byte from EEPROM
	//EEPROM_u8ReadByte(5, &local_u8Data);

	// Display Results
	//HLCD_voidSendString("Expected Value: ");
	HLCD_voidDisplayNumber(5);
 742:	85 e0       	ldi	r24, 0x05	; 5
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 1c 02 	call	0x438	; 0x438 <HLCD_voidDisplayNumber>
 74a:	ff cf       	rjmp	.-2      	; 0x74a <main+0x14>

0000074c <__mulsi3>:
 74c:	62 9f       	mul	r22, r18
 74e:	d0 01       	movw	r26, r0
 750:	73 9f       	mul	r23, r19
 752:	f0 01       	movw	r30, r0
 754:	82 9f       	mul	r24, r18
 756:	e0 0d       	add	r30, r0
 758:	f1 1d       	adc	r31, r1
 75a:	64 9f       	mul	r22, r20
 75c:	e0 0d       	add	r30, r0
 75e:	f1 1d       	adc	r31, r1
 760:	92 9f       	mul	r25, r18
 762:	f0 0d       	add	r31, r0
 764:	83 9f       	mul	r24, r19
 766:	f0 0d       	add	r31, r0
 768:	74 9f       	mul	r23, r20
 76a:	f0 0d       	add	r31, r0
 76c:	65 9f       	mul	r22, r21
 76e:	f0 0d       	add	r31, r0
 770:	99 27       	eor	r25, r25
 772:	72 9f       	mul	r23, r18
 774:	b0 0d       	add	r27, r0
 776:	e1 1d       	adc	r30, r1
 778:	f9 1f       	adc	r31, r25
 77a:	63 9f       	mul	r22, r19
 77c:	b0 0d       	add	r27, r0
 77e:	e1 1d       	adc	r30, r1
 780:	f9 1f       	adc	r31, r25
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	11 24       	eor	r1, r1
 788:	08 95       	ret

0000078a <__udivmodsi4>:
 78a:	a1 e2       	ldi	r26, 0x21	; 33
 78c:	1a 2e       	mov	r1, r26
 78e:	aa 1b       	sub	r26, r26
 790:	bb 1b       	sub	r27, r27
 792:	fd 01       	movw	r30, r26
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <__udivmodsi4_ep>

00000796 <__udivmodsi4_loop>:
 796:	aa 1f       	adc	r26, r26
 798:	bb 1f       	adc	r27, r27
 79a:	ee 1f       	adc	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	a2 17       	cp	r26, r18
 7a0:	b3 07       	cpc	r27, r19
 7a2:	e4 07       	cpc	r30, r20
 7a4:	f5 07       	cpc	r31, r21
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__udivmodsi4_ep>
 7a8:	a2 1b       	sub	r26, r18
 7aa:	b3 0b       	sbc	r27, r19
 7ac:	e4 0b       	sbc	r30, r20
 7ae:	f5 0b       	sbc	r31, r21

000007b0 <__udivmodsi4_ep>:
 7b0:	66 1f       	adc	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	1a 94       	dec	r1
 7ba:	69 f7       	brne	.-38     	; 0x796 <__udivmodsi4_loop>
 7bc:	60 95       	com	r22
 7be:	70 95       	com	r23
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	9b 01       	movw	r18, r22
 7c6:	ac 01       	movw	r20, r24
 7c8:	bd 01       	movw	r22, r26
 7ca:	cf 01       	movw	r24, r30
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
